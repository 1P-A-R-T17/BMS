from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery")
  |> filter(fn: (r) => r["Type"] == "State of charge")
  |> filter(fn: (r) => r["_field"] == "state of charge 0" or r["_field"] == "state of charge 1" or r["_field"] == "state of charge 2" or r["_field"] == "state of charge 3" or r["_field"] == "state of charge 4" or r["_field"] == "state of charge 5" or r["_field"] == "state of charge 6" or r["_field"] == "state of charge 7" or r["_field"] == "state of charge 8")
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "mean")


from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery")
  |> filter(fn: (r) => r["Type"] == "Voltage")
  |> filter(fn: (r) => r["_field"] == "Total Voltage")
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "last")


from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery")
  |> filter(fn: (r) => r["Type"] == "current")
  |> filter(fn: (r) => r["_field"] == "Total Current")
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "last")



from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery")
  |> filter(fn: (r) => r["Type"] == "Voltage")
  |> filter(fn: (r) => r["_field"] == "voltage0" or r["_field"] == "voltage1" or r["_field"] == "voltage2")
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "mean")


from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery")
  |> filter(fn: (r) => r["Type"] == "current")
  |> filter(fn: (r) => r["_field"] == "current0" or r["_field"] == "current1" or r["_field"] == "current2" or r["_field"] == "current3" or r["_field"] == "current4" or r["_field"] == "current5" or r["_field"] == "current6" or r["_field"] == "current7" or r["_field"] == "current8")
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "mean")


from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery")
  |> filter(fn: (r) => r["Type"] == "State of charge")
  |> filter(fn: (r) => r["_field"] == "state of charge 0" or r["_field"] == "state of charge 1" or r["_field"] == "state of charge 2" or r["_field"] == "state of charge 3" or r["_field"] == "state of charge 4" or r["_field"] == "state of charge 5" or r["_field"] == "state of charge 6" or r["_field"] == "state of charge 7" or r["_field"] == "state of charge 8")
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "mean")


from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery")
  |> filter(fn: (r) => r["Type"] == "temperature")
  |> filter(fn: (r) => r["_field"] == "temperature0" or r["_field"] == "temperature1" or r["_field"] == "temperature2" or r["_field"] == "temperature3" or r["_field"] == "temperature5" or r["_field"] == "temperature4" or r["_field"] == "temperature6" or r["_field"] == "temperature7" or r["_field"] == "temperature8")
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "mean")



from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery_error")
  |> filter(fn: (r) => r["_field"] == "Cell Balance OFF")
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "last")


from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery_error")
  |> filter(fn: (r) => r["_field"] == "Cell Balance ON")
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "last")


from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery_error")
  |> filter(fn: (r) => r["_field"] == "under_voltage")
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "last")

from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery_error")
  |> filter(fn: (r) => r["_field"] == "over_voltage")
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "last")


from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery")
  |> filter(fn: (r) => r["Type"] == "State of Health")
  |> filter(fn: (r) => r["_field"] == "SoH")
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "last")


from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery_error")
  |> filter(fn: (r) => r["_field"] == "over_current")
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "last")

from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery_error")
  |> filter(fn: (r) => r["_field"] == "discharging")
  |> aggregateWindow(every: 1s, fn: last, createEmpty: false)
  |> yield(name: "last")


from(bucket: "Battery Management")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "Battery_error")
  |> filter(fn: (r) => r["_field"] == "charging")
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "last")